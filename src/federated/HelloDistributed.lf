/** Test a particularly simple form of a distributed deterministic system
 *  where a federation that receives timestamped messages has only those
 *  messages as triggers. Therefore, no additional coordination of the
 *  advancement of time (HLA or Ptides) is needed.
 *  @author Edward A. Lee
 */
target C;

reactor Source {
    output out:string;
    reaction(startup) -> out {=
        info_print("Sending 'Hello World!' message from source federate.");
        SET(out, "Hello World!");
        request_stop();
    =}
}
reactor Destination {
    input in:string;
    state received:bool(false);
    reaction(startup) {=
        info_print("Destination started.");
    =}
    reaction(in) {=
        info_print("At logical time %lld, destination received: %s", get_elapsed_logical_time(), in->value);
        if (strcmp(in->value, "Hello World!") != 0) {
            fprintf(stderr, "ERROR: Expected to receive 'Hello World!'\n");
            exit(1);
        }
        self->received = true;
    =}
    reaction(shutdown) {=
        info_print("Shutdown invoked.");
        if (!self->received) {
            error_print_and_exit("Destination did not receive the message.");
        }
    =}
}

federated reactor HelloDistributed at localhost {
    reaction(startup) {=
        info_print("Printing something in top-level federated reactor.");
    =}
    s = new Source();      // Reactor s is in federate Source
    d = new Destination(); // Reactor d is in federate Destination
    s.out -> d.in;         // This version preserves the timestamp.
}
