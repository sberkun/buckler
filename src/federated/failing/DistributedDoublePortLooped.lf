/** 
 * Test the case for when two upstream federates
 * send messages to a downstream federate on two
 * different ports. One message should carry a 
 * microstep delay relative to the other
 * message.
 * 
 * @author Soroush Bateni
 */
target C {
    timeout: 900 msec,
    logging: LOG,
    coordination: centralized
};

reactor Foo {
    timer t(0, 700 usec);
    output out:int;
    reaction(t) -> out {=
        SET(out, 0);
    =}
}

reactor Count {
    state count:int(1);
    input in1:int;
    input in2:int;
    input in3:int
    output out1:int;
    output out2:int;
    timer t(0, 1 msec);
    reaction(in1) -> out1 {=
        
    =}
    // in2 is not connected to anything.
    // Consequently, the control reaction
    // for in2 waits forever.
    reaction(in2,t) -> out2 {=
        SET(out2, self->count++);
    =}
    reaction(in3) {=
        
    =}
}

reactor CountMicrostep {
    state count:int(1);
    output out:int;
    logical action act:int;
    timer t(0, 1 msec);
    reaction(t) -> act {=
        schedule_int(act, 0, self->count++);
    =}
    
    reaction(act) -> out {=
        SET(out, act->value);
    =}
}

reactor Print {
    input in1:int;
    input in2:int;
    input in3:int;
    output out:int;
    timer t(0,2 msec);
    reaction(in1, in2, in3, t) -> out {=
        interval_t elapsed_time = get_elapsed_logical_time();
        info_print("At tag (%lld, %u), received in = %d and in2 = %d.", elapsed_time, get_microstep(), in1->value, in2->value);
        if (in1->is_present && in2->is_present) {
            error_print_and_exit("ERROR: invalid logical simultaneity.");
        }
        SET(out, in1->value);
    =}
}

federated reactor {
    f = new Foo();
    c = new Count();
    f.out -> c.in1;
    cm = new CountMicrostep();
    p = new Print();
    c.out1 -> p.in2
    c.out2 -> p.in3;    // Indicating a 'logical' connection.
    cm.out -> p.in1;
    p.out -> c.in3;
}
