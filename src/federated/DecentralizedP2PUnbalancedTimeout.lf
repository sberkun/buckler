/**
 * Test a source-destination scenario where the source falls behind real-time, and reaches the
 * timeout much later than the destination. In this test, the destination closes the connection
 * early, causing the transmission to fail.  Warnings will be printed about lost messages.
 * 
 * The test fails if the federation does not exit. 
 */
target C {
    timeout: 1 msec,
    coordination: decentralized
}

reactor Clock(offset:time(0), period:time(1 sec)) {
    output y:int;
    timer t(offset, period);
    state count:int(0);
    reaction(t) -> y {=
        (self->count)++;
        info_print("Sending %d.", self->count);
        SET(y, self->count);
    =}
    reaction(shutdown) {=
        info_print("SUCCESS: the source exited successfully.");
    =}
}
reactor Destination {
    input x:int;
    state s:int(1);
    reaction(x) {=
        info_print("Received %d", x->value);
        tag_t current_tag = get_current_tag();
        if (x->value != self->s) {
            error_print_and_exit("At tag (%lld, %u) expected %d and got %d.", 
                current_tag.time - start_time, current_tag.microstep, self->s, x->value
            );
        }
        self->s++;
    =}
    reaction(shutdown) {=
        info_print("**** shutdown reaction invoked.");
        info_print("Approx. time per reaction: %lldns", get_elapsed_physical_time()/(self->s+1));
    =}
}
federated reactor (period:time(10 usec)) {
    c = new Clock(period = period);
    d = new Destination();
    c.y -> d.x;
}