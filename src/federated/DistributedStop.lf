 /**
 * Test for request_stop() in federated execution with centralized coordination.
 * 
 * @author Soroush Bateni
 */
target C;

reactor Sender {
    output out:int;
    timer t(0, 1 usec);
    logical action act;
    state reaction_invoked_correctly:bool(false);
    reaction(t, act) -> out, act {=
        info_print("Sending 42 at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
        SET(out, 42);
        if (get_microstep() == 0) {
            // Instead of having a separate reaction
            // for 'act' like Stop.lf, we trigger the 
            // same reaction to test request_stop() being
            // called multiple times
        	schedule(act, 0);        	
        }
        if (get_elapsed_logical_time() == USEC(1)) {
            // Call request_stop() both at (1 usec, 0) and
            // (1 usec, 1)
            info_print("Requesting stop at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
            request_stop();
        } 
        
        tag_t _1usec1 = (tag_t) { .time = USEC(1) + get_start_time(), .microstep = 1u };
        if (compare_tags(get_current_tag(), _1usec1) == 0) {
            // The reaction was invoked at (1 usec, 1) as expected
		    self->reaction_invoked_correctly = true;
        } else if (compare_tags(get_current_tag(), _1usec1) > 0) {
            // The reaction should not have been invoked at tags larger than (1 usec, 1)
            error_print_and_exit("ERROR: Invoked reaction(t, act) at tag bigger than shutdown.");
        }
    =}
    
    reaction(shutdown) {=
        if (get_elapsed_logical_time() != USEC(1) ||
            get_microstep() != 1) {
            error_print_and_exit("ERROR: Sender failed to stop the federation in time. "
                    "Stopping at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
        } else if (self->reaction_invoked_correctly == false) {
            error_print_and_exit("ERROR: Sender reaction(t, act) was not invoked at (1 usec, 1). "
                    "Stopping at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
        }
        info_print("SUCCESS: Successfully stopped the federation at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
    =}
}

reactor Receiver (
    stp_offset:time(10 msec) // Used in the decentralized variant of the test
) {
    input in:int;
    state reaction_invoked_correctly:bool(false);
    reaction(in) {=
        info_print("Received %d at (%lld, %u).",
                     in->value,
                     get_elapsed_logical_time(),
                     get_microstep());
        if (get_elapsed_logical_time() == USEC(1)) {
            info_print("Requesting stop at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
        	request_stop();
        	// The receiver should receive a message at tag
        	// (1 usec, 1) and trigger this reaction
        	self->reaction_invoked_correctly = true;
        }
        
        tag_t _1usec1 = (tag_t) { .time = USEC(1) + get_start_time(), .microstep = 1u };
        if (compare_tags(get_current_tag(), _1usec1) > 0) {
        	self->reaction_invoked_correctly = false;            
        }
    =}
    
    reaction(shutdown) {=
        // Sender should have requested stop earlier than the receiver.
        // Therefore, the shutdown events must occur at (1000, 0) on the
        // receiver.
        if (get_elapsed_logical_time() != USEC(1) ||
            get_microstep() != 1) {
            error_print_and_exit("Receiver failed to stop the federation at the right time. "
                    "Stopping at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
        } else if (self->reaction_invoked_correctly == false) {            
            error_print_and_exit("Receiver reaction(in) was not invoked the correct number of times. "
                    "Stopping at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
        }
        info_print("SUCCESS: Successfully stopped the federation at (%lld, %u).",
                     get_elapsed_logical_time(),
                     get_microstep());
    =}
}

federated reactor DistributedStop {
    sender = new Sender();
    receiver = new Receiver();
    
    sender.out -> receiver.in;
}